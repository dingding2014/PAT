#include<cstdio>
#include<cstring>
#include<algorithm>
#include<vector>
#include<map>
#include<stack>
#include<string>
#include<queue>
using namespace std;
const int INF=2100000000;
int n,m,city_start,city_end,min_cost;
int dis[501],mapp[501][501],weight[501][501],tmp_Path[501];
bool vis[501];
vector<int> pre[501],result;
void dij(int s)                               //dij里更新cost代价为何不行？？
{
	int i,j;
	for(i=0;i<n;i++)
	{
	   dis[i]=INF;
	   vis[i]=true;
	}
	dis[s]=0;	
    for(i=0;i<n;i++)
	{
	   int min=INF,u=-1;
	   for(j=0;j<n;j++)
		   if(vis[j]&&dis[j]<min)
		   {
		      min=dis[j];
			  u=j;
		   }
	   if(u==-1) return;
	   vis[u]=false;
	   for(int v=0;v<n;v++)
		   if(vis[v]&&mapp[u][v]!=INF)
		   {
		      if((dis[u]+mapp[u][v]<dis[v]))	
			  {
			      dis[v]=dis[u]+mapp[u][v];	
				  pre[v].clear();
				  pre[v].push_back(u);
			  }
			  else if(dis[u]+mapp[u][v]==dis[v])
			  {
			      pre[v].push_back(u);
			  }
		   }
	}
}
void dfs(int f,int kk)
{
	tmp_Path[kk]=f;
    if(f==city_start)
	{
		int cost=0;
		for(int j=kk;j>0;j--)
			cost+=weight[tmp_Path[j]][tmp_Path[j-1]];
		if(cost<min_cost)
		{
		   min_cost=cost;
		   result.clear();
		   for(int j=kk;j>=0;j--)
			   result.push_back(tmp_Path[j]);
		}
	    return;
	}
	int i,len=pre[f].size();
	for(i=0;i<len;i++)
		dfs(pre[f][i],kk+1);
}
int main()
{
	int i,j,k;
	scanf("%d %d %d %d",&n,&m,&city_start,&city_end);
	int city1,city2,len,cost;
	for(i=0;i<n;i++)
		for(j=0;j<n;j++)	
			mapp[i][j]=INF;	
	for(i=0;i<m;i++)
	{
		scanf("%d%d%d%d",&city1,&city2,&len,&cost);
		mapp[city1][city2]=mapp[city2][city1]=len;
		weight[city1][city2]=weight[city2][city1]=cost;
	}
	dij(city_start);
	min_cost=INF;
	dfs(city_end,0);
	for(i=0;i<result.size();i++)
		printf("%d ",result[i]);
	printf("%d %d\n",dis[city_end],min_cost);
    return 0;
}